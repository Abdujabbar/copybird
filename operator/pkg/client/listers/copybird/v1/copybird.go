/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/copybird/copybird/operator/pkg/apis/copybird/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CopyBirdLister helps list CopyBirds.
type CopyBirdLister interface {
	// List lists all CopyBirds in the indexer.
	List(selector labels.Selector) (ret []*v1.CopyBird, err error)
	// CopyBirds returns an object that can list and get CopyBirds.
	CopyBirds(namespace string) CopyBirdNamespaceLister
	CopyBirdListerExpansion
}

// copyBirdLister implements the CopyBirdLister interface.
type copyBirdLister struct {
	indexer cache.Indexer
}

// NewCopyBirdLister returns a new CopyBirdLister.
func NewCopyBirdLister(indexer cache.Indexer) CopyBirdLister {
	return &copyBirdLister{indexer: indexer}
}

// List lists all CopyBirds in the indexer.
func (s *copyBirdLister) List(selector labels.Selector) (ret []*v1.CopyBird, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CopyBird))
	})
	return ret, err
}

// CopyBirds returns an object that can list and get CopyBirds.
func (s *copyBirdLister) CopyBirds(namespace string) CopyBirdNamespaceLister {
	return copyBirdNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CopyBirdNamespaceLister helps list and get CopyBirds.
type CopyBirdNamespaceLister interface {
	// List lists all CopyBirds in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.CopyBird, err error)
	// Get retrieves the CopyBird from the indexer for a given namespace and name.
	Get(name string) (*v1.CopyBird, error)
	CopyBirdNamespaceListerExpansion
}

// copyBirdNamespaceLister implements the CopyBirdNamespaceLister
// interface.
type copyBirdNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CopyBirds in the indexer for a given namespace.
func (s copyBirdNamespaceLister) List(selector labels.Selector) (ret []*v1.CopyBird, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CopyBird))
	})
	return ret, err
}

// Get retrieves the CopyBird from the indexer for a given namespace and name.
func (s copyBirdNamespaceLister) Get(name string) (*v1.CopyBird, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("copybird"), name)
	}
	return obj.(*v1.CopyBird), nil
}
